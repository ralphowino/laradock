version: '2'

services:

### Applications Code Container #############################

    applications:
      image: tianon/true
      volumes:
        - ${APPLICATION}:/var/www/

### Applications Code Container #############################

    app:
      image: tianon/true
      depends_on:
         - nginx
         - mailhog
         - mysql
         - phpmyadmin

### Cli Utilities Container ###########################

    cli:
      build:
        context: ./workspace
        args:
          - INSTALL_XDEBUG=${CLI_INSTALL_XDEBUG}
          - INSTALL_BLACKFIRE=${INSTALL_BLACKFIRE}
          - INSTALL_SOAP=${CLI_INSTALL_SOAP}
          - INSTALL_MONGO=${CLI_INSTALL_MONGO}
          - INSTALL_MSSQL=${CLI_INSTALL_MSSQL}
          - INSTALL_NODE=${CLI_INSTALL_NODE}
          - INSTALL_YARN=${CLI_INSTALL_YARN}
          - INSTALL_DRUSH=${CLI_INSTALL_DRUSH}
          - INSTALL_AEROSPIKE=${CLI_INSTALL_AEROSPIKE}
          - INSTALL_V8JS=${CLI_INSTALL_V8JS}
          - COMPOSER_GLOBAL_INSTALL=${CLI_COMPOSER_GLOBAL_INSTALL}
          - INSTALL_WORKSPACE_SSH=${CLI_INSTALL_WORKSPACE_SSH}
          - INSTALL_LARAVEL_ENVOY=${CLI_INSTALL_LARAVEL_ENVOY}
          - INSTALL_DEPLOYER=${CLI_INSTALL_DEPLOYER}
          - INSTALL_LINUXBREW=${CLI_INSTALL_LINUXBREW}
          - INSTALL_MC=${CLI_INSTALL_MC}
          - PUID=${CLI_PUID}
          - PGID=${CLI_PGID}
          - NODE_VERSION=${CLI_NODE_VERSION}
          - YARN_VERSION=${CLI_YARN_VERSION}
          - TZ=${CLI_TIMEZONE}
          - BLACKFIRE_CLIENT_ID=${BLACKFIRE_CLIENT_ID}
          - BLACKFIRE_CLIENT_TOKEN=${BLACKFIRE_CLIENT_TOKEN}
        dockerfile: "Dockerfile-${PHP_VERSION}"
      volumes_from:
        - applications
      extra_hosts:
        - "dockerhost:${DOCKER_HOST_IP}"
      ports:
        - 22
      tty: true

### PHP-FPM Container #######################################

    php-fpm:
      build:
        context: ./php-fpm
        args:
          - INSTALL_XDEBUG=${PHP_FPM_INSTALL_XDEBUG}
          - INSTALL_BLACKFIRE=${INSTALL_BLACKFIRE}
          - INSTALL_SOAP=${PHP_FPM_INSTALL_SOAP}
          - INSTALL_MONGO=${PHP_FPM_INSTALL_MONGO}
          - INSTALL_MSSQL=${PHP_FPM_INSTALL_MSSQL}
          - INSTALL_ZIP_ARCHIVE=${PHP_FPM_INSTALL_ZIP_ARCHIVE}
          - INSTALL_BCMATH=${PHP_FPM_INSTALL_BCMATH}
          - INSTALL_PHPREDIS=${PHP_FPM_INSTALL_PHPREDIS}
          - INSTALL_MEMCACHED=${PHP_FPM_INSTALL_MEMCACHED}
          - INSTALL_OPCACHE=${PHP_FPM_INSTALL_OPCACHE}
          - INSTALL_EXIF=${PHP_FPM_INSTALL_EXIF}
          - INSTALL_AEROSPIKE=${PHP_FPM_INSTALL_AEROSPIKE}
          - INSTALL_MYSQLI=${PHP_FPM_INSTALL_MYSQLI}
          - INSTALL_TOKENIZER=${PHP_FPM_INSTALL_TOKENIZER}
          - INSTALL_INTL=${PHP_FPM_INSTALL_INTL}
          - INSTALL_GHOSTSCRIPT=${PHP_FPM_INSTALL_GHOSTSCRIPT}
        dockerfile: "Dockerfile-${PHP_VERSION}"
      volumes_from:
        - applications
      volumes:
        - ./php-fpm/php${PHP_VERSION}.ini:/usr/local/etc/php/php.ini
      expose:
        - 9000
      depends_on:
        - cli
      extra_hosts:
        - "dockerhost:${DOCKER_HOST_IP}"
      environment:
        - PHP_IDE_CONFIG=${PHP_IDE_CONFIG}

### PHP Worker Container #####################################

    worker:
      build:
        context: ./php-worker
      volumes_from:
        - applications
      depends_on:
        - cli

### Laravel Echo #####################################

    echo:
      build:
        context: ./laravel-echo
      volumes_from:
        - applications
      ports:
        - 6001
      environment:
        - VIRTUAL_HOST=${ECHO_DOMAIN}


### Nginx Server Container ##################################

    nginx:
      build:
        context: ./nginx
        args:
          - PHP_UPSTREAM=php-fpm
      volumes_from:
        - applications
      volumes:
        - ${NGINX_HOST_LOG_PATH}:/var/log/nginx
        - ${NGINX_SITES_PATH}:/etc/nginx/sites-available
      ports:
        - 80
        - 443
      environment:
        - VIRTUAL_HOST=${MAIN_DOMAIN}
      depends_on:
        - php-fpm

### Blackfire Container #################################

    blackfire:
      image: blackfire/blackfire
      environment:
        - BLACKFIRE_SERVER_ID=${BLACKFIRE_SERVER_ID}
        - BLACKFIRE_SERVER_TOKEN=${BLACKFIRE_SERVER_TOKEN}
      depends_on:
        - php-fpm

### Apache Server Container #################################

    apache2:
      build:
        context: ./apache2
        args:
          - PHP_SOCKET=${PHP_SOCKET}
      volumes_from:
        - applications
      volumes:
        - ${APACHE_HOST_LOG_PATH}:/var/log/apache2
        - ./apache2/sites:/etc/apache2/sites-available
      ports:
        - 80
        - 443
      environment:
        - VIRTUAL_HOST=${MAIN_DOMAIN}
      depends_on:
        - php-fpm

### HHVM Container ##########################################

    hhvm:
      build: ./hhvm
      volumes_from:
        - applications
      expose:
        - 9000
      depends_on:
        - cli

### Minio Container #########################################

    minio:
      build: ./minio
      volumes:
        - minio:/export
      ports:
        - 9000
      environment:
        - MINIO_ACCESS_KEY=access
        - MINIO_SECRET_KEY=secretkey

### MySQL Container #########################################

    mysql:
      build:
        context: ./mysql
      environment:
        - MYSQL_DATABASE=${MYSQL_DATABASE}
        - MYSQL_USER=${MYSQL_USER}
        - MYSQL_PASSWORD=${MYSQL_PASSWORD}
        - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
      volumes:
        - ${DATA_SAVE_PATH}/mysql:/var/lib/mysql
      ports:
        - 3306

### Percona Container #########################################

    percona:
      build:
        context: ./percona
      environment:
        - MYSQL_DATABASE=${PERCONA_DATABASE}
        - MYSQL_USER=${PERCONA_USER}
        - MYSQL_PASSWORD=${PERCONA_PASSWORD}
        - MYSQL_ROOT_PASSWORD=${PERCONA_ROOT_PASSWORD}
      volumes:
        - percona:/var/lib/mysql
      ports:
        - 3306

### MSSQL Container #########################################

    mssql:
      build:
        context: ./mssql
      environment:
        - MSSQL_DATABASE=${MSSQL_DATABASE}
        - SA_PASSWORD=${MSSQL_PASSWORD}
        - ACCEPT_EULA=Y
      volumes:
        - ${DATA_SAVE_PATH}/mssql:/var/opt/mssql
      ports:
        - 1433

### MariaDB Container #######################################

    mariadb:
      build: ./mariadb
      volumes:
        - ${DATA_SAVE_PATH}/mariadb:/var/lib/mysql
      ports:
        - 3306
      environment:
        - MYSQL_DATABASE=${MARIADB_DATABASE}
        - MYSQL_USER=${MARIADB_USER}
        - MYSQL_PASSWORD=${MARIADB_PASSWORD}
        - MYSQL_ROOT_PASSWORD=${MARIADB_ROOT_PASSWORD}

### PostgreSQL Container ####################################

    postgres:
      build: ./postgres
      volumes:
        - ${DATA_SAVE_PATH}/postgres:/var/lib/postgresql/data
      ports:
        - 5432
      environment:
        - POSTGRES_DB=${POSTGRES_DB}
        - POSTGRES_USER=${POSTGRES_USER}
        - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}

### PostgreSQL PostGis Container ############################

    postgres-postgis:
      build: ./postgres-postgis
      volumes:
        - ${DATA_SAVE_PATH}/postgres:/var/lib/postgresql/data
      ports:
        - 5432
      environment:
        - POSTGRES_DB=${POSTGRES_DB}
        - POSTGRES_USER=${POSTGRES_USER}
        - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}

### Neo4j Container #########################################

    neo4j:
      build: ./neo4j
      ports:
        - 7474
        - 1337
      environment:
        - NEO4J_AUTH=default:secret
      volumes:
        - ${DATA_SAVE_PATH}/neo4j:/var/lib/neo4j/data

### MongoDB Container #######################################

    mongo:
      build: ./mongo
      ports:
        - 27017
      volumes:
        - ${DATA_SAVE_PATH}/mongo:/data/db

### RethinkDB Container #######################################

    rethinkdb:
      build: ./rethinkdb
      ports:
        - 8080
      volumes:
        - ${DATA_SAVE_PATH}/rethinkdb:/data/rethinkdb_data

### Redis Container #########################################

    redis:
      build: ./redis
      volumes:
        - ${DATA_SAVE_PATH}/redis:/data
      ports:
        - 6379

    redis-commander:
      build: ./redis-commander
      environment:
        - VIRTUAL_HOST=${QUEUE_DOMAIN}
      entrypoint: redis-commander --redis-host redis
      ports:
          - 8081
      links:
          - redis


### Aerospike c Container ###################################

    aerospike:
      build: ./aerospike
      volumes_from:
        - cli
      volumes:
        - ${DATA_SAVE_PATH}/aerospike:/opt/aerospike/data
      ports:
        - 3000
        - 3001
        - 3002
        - 3003

### Memcached Container #####################################

    memcached:
      build: ./memcached
      volumes:
        - ${DATA_SAVE_PATH}/memcached:/var/lib/memcached
      ports:
        - 11211
      depends_on:
        - php-fpm

### Beanstalkd Container ####################################

    beanstalkd:
      build: ./beanstalkd
      ports:
        - 11300
      privileged: true
      depends_on:
        - php-fpm

### RabbitMQ Container ######################################

    rabbitmq:
      build: ./rabbitmq
      ports:
        - 5672
        - 15672
        - 15671
      privileged: true
      environment:
        - RABBITMQ_DEFAULT_USER=${RABBITMQ_DEFAULT_USER}
        - RABBITMQ_DEFAULT_PASS=${RABBITMQ_DEFAULT_PASS}
      depends_on:
        - php-fpm

### Beanstalkd Console Container ############################

    beanstalkd-console:
      build: ./beanstalkd-console
      ports:
        - 2080
      environment:
        - VIRTUAL_HOST=${QUEUE_DOMAIN}
      depends_on:
        - beanstalkd

### Caddy Server Container ##################################

    caddy:
      build: ./caddy
      ports:
        - 80
        - 443
        - 2015
      volumes_from:
        - applications
      volumes:
        - ./caddy/Caddyfile:/etc/Caddyfile
        - ./logs/caddy:/var/log/caddy
        - caddy:/root/.caddy
      depends_on:
        - php-fpm

### phpMyAdmin Container ####################################

    phpmyadmin:
      build: ./phpmyadmin
      environment:
        - PMA_ARBITRARY=1
        - PMA_HOST=${PMA_DB_ENGINE}
        - PMA_USER=${PMA_USER}
        - PMA_PASSWORD=${PMA_PASSWORD}
        - MYSQL_USER=${PMA_USER}
        - MYSQL_PASSWORD=${PMA_PASSWORD}
        - MYSQL_ROOT_PASSWORD=${PMA_ROOT_PASSWORD}
        - VIRTUAL_HOST=${DB_DOMAIN}
      ports:
        - 80
      depends_on:
        - "${PMA_DB_ENGINE}"

### Adminer Container ####################################

    adminer:
      build: ./adminer
      ports:
        - 8080
      environment:
        - VIRTUAL_HOST=${DB_DOMAIN}
      depends_on:
        - php-fpm

### pgAdmin Container #######################################

    pgadmin:
      build: ./pgadmin
      ports:
        - 5050
      environment:
        - VIRTUAL_HOST=${DB_DOMAIN}
      depends_on:
        - postgres

### ElasticSearch Container #################################

    elasticsearch:
      build: ./elasticsearch
      volumes:
        - elasticsearch-data:/usr/share/elasticsearch/data
        - elasticsearch-plugins:/usr/share/elasticsearch/plugins
      ports:
        - 9200
        - 9300
      depends_on:
        - php-fpm

### Certbot Container ##################################

    certbot:
      build:
        context: ./certbot
      volumes:
        - ./data/certbot/certs/:/var/certs
        - ./certbot/letsencrypt/:/var/www/letsencrypt
      environment:
        - CN="fake.domain.com"
        - EMAIL="fake.email@gmail.com"

### Mailhog Container #########################################

    mailhog:
      build: ./mailhog
      ports:
        - 1025
        - 8025
      environment:
        - VIRTUAL_HOST=${MAIL_DOMAIN}
        - VIRTUAL_PORT=8025


### Selenium Container ########################################

    selenium:
      build: ./selenium
      ports:
        - 4444
      volumes:
        - /dev/shm:/dev/shm

### Jenkins ###################################################
    jenkins:
      build: ./jenkins
      environment:
        - JAVA_OPTS="-Djava.awt.headless=true"
        - VIRTUAL_HOST=${JENKINS_DOMAIN}
      ports:
        - 50000
        - 8080
      privileged: true
      volumes:
        - ${JENKINS_HOME}:/var/jenkins_home
        - /var/run/docker.sock:/var/run/docker.sock


### Networks Setup ############################################
networks:
  default:
    external:
      name: nginxproxy_default


### Volumes Setup #############################################

volumes:
  mysql:
    driver: "local"
  percona:
    driver: "local"
  mssql:
    driver: "local"
  postgres:
    driver: "local"
  memcached:
    driver: "local"
  redis:
    driver: "local"
  neo4j:
    driver: "local"
  mariadb:
    driver: "local"
  mongo:
    driver: "local"
  minio:
    driver: "local"
  rethinkdb:
    driver: "local"
  phpmyadmin:
    driver: "local"
  adminer:
    driver: "local"
  aerospike:
    driver: "local"
  caddy:
    driver: "local"
  elasticsearch-data:
    driver: "local"
  elasticsearch-plugins:
    driver: "local"
